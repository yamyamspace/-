#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

bool dfs_visited[1001];
bool bfs_visited[1001];
vector<int> graph[1001];

void dfs(int v){
    dfs_visited[v]=1;
    cout<<v<<" ";
    for(int next: graph[v]){
        if(!dfs_visited[next]){
            dfs(next);
        }
    }
}
void bfs(int v){
    queue<int> q;
    q.push(v);
    bfs_visited[v]=1;
    while(!q.empty()){
        int cur = q.front(); 
        cout<<cur<<" ";
        q.pop();
        for(int next: graph[cur]){
            if(!bfs_visited[next]){
                bfs_visited[next] = 1;
                q.push(next);
            }
        }
    }
}
int main(){
    int n,m,v;
    cin>>n>>m>>v;
    int start,end;
    
    for(int i=0;i<m;i++){
        cin>>start>>end;
        graph[start].push_back(end);
        graph[end].push_back(start);
    }
    for(int i=1;i<=n;i++){
        sort(graph[i].begin(), graph[i].end());
    }
    dfs(v);
    cout<<"\n";
    bfs(v);
}
